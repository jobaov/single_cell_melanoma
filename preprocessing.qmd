---
title: "Preprocessing 10xRNA_H-melanoma-PBMC-gdT-A"
format: html
editor: visual
---

## Preparation

In the following section, the single cell data is loaded to create a Seurat object including both gene expression data and hashtag oligo data. Relevant metadata is added.

### Set Up

Relevant libraries are loaded.

```{r}
#|output: false

library(Seurat)
library(tidyverse)
library(stringr)
library(patchwork)
library(ggplot2)
library(SingleCellExperiment)
library(scDblFinder)
library(DESeq2)
library(scater)
library(table1)
library(readxl)
```

Define the path to get the data and save results. The path might have to be changed.

```{r}
# Johanne
data_path <- "/Volumes/Department/Sund/Public/T-Cell-Signalling-and-Development/VB Lab/10x_data/SpecialProject/10xRNA_H-melanoma-PBMC-gdT/data"

results_path <- "/Volumes/Department/Sund/Public/T-Cell-Signalling-and-Development/VB Lab/10x_data/SpecialProject/10xRNA_H-melanoma-PBMC-gdT/results/preprocessing"

# Helene
#path <- "o:/Public/T-Cell-Signalling-and-Development/VB Lab/10x_data/SpecialProject/10xRNA_H-melanoma-PBMC-gdT/code"
```

### Data Load

The data from all experiments are loaded at once.

```{r}
sample <- paste("10xRNA_H-melanoma-PBMC-gdT",
                LETTERS[1:5],
                sep = "-")

melanoma_pbmc_data <- Read10X(data.dir = paste(data_path,
                                               "/raw_data",
                                               sample,
                                               "filtered_feature_bc_matrix",
                                               sep="/"))
```

The object melanoma_pbmc_data is a list of 2 elements: The gene counts (Gene expression) and the expression of hashtag oligonucleotide (Antibody Capture) for each cell. A Seurat object is created from the gene counts. As we only want to include cells present in both data sets, we first identify the cells in common between the two. Furthermore, we will only include genes detected in at least 3 cells.

```{r}
melanoma_joined_cells <- intersect(colnames(melanoma_pbmc_data$`Gene Expression`),
                                   colnames(melanoma_pbmc_data$`Antibody Capture`))

melanoma_seu_obj <- CreateSeuratObject(counts = melanoma_pbmc_data$`Gene Expression`[ , melanoma_joined_cells], 
                                       min.cells = 3)

melanoma_seu_obj
```

The data consists of in total 38115 cells expressing together 21457 genes. The sample information is given by the cell identity classes and save in the metadata as well.

```{r}
table(Idents(melanoma_seu_obj))
table(melanoma_seu_obj@meta.data$orig.ident)
```

### Demultiplexing

The following section follows the guide described in the hashing vignette:

<https://satijalab.org/seurat/archive/v3.1/hashing_vignette.html>

We wish to add the hashtag oligo (HTO) data to the Seurat object to identify the response state and the timepoint for each cell. As for the gene counts, we select only the data for relevant cells, that is, cells present in the gene expression data.

```{r}
melanoma_seu_obj[["HTO"]] <- CreateAssayObject(counts = melanoma_pbmc_data$`Antibody Capture`[ , melanoma_joined_cells])
```

Before assigning the cells back to their sample origins, the HTO data is normalized using centered log ratio (CLR) transformation, where counts were divided by the geometric mean of an HTO across cells and log-transformed:

$$
x_i' = \log\frac{x_i}{(\prod_{i=1}^{n} x_i)^{\frac{1}{n}}}
$$

Here, $x_i$ is the count for a specified HTO in cell $i$, $n$ is the total number of cells.

```{r}
melanoma_seu_obj <- NormalizeData(melanoma_seu_obj, 
                                  assay = "HTO", 
                                  normalization.method = "CLR")
```

We use the Seurat function HTODemux() to assign single cells to their origin. This function identifies an expression threshold for each HTO to classify cells as either singlets together with their sample-of-origin, doublets and negative cells (empty droplets). The procedure is as follows:

1)  The cells are clustered into $K+1$ clusters, where $K$ is the number of samples (which is 4 in this case).

The following procedure is performed for each HTOs:

2)  We identified the $K$-medoids cluster with the highest average HTO expression and excluded these cells. That is, we use the cluster with the lowest average value as the negative group to determine a background distribution for each HTO based on “negative” cells. Outliers from this distribution is thought to represent positive signals.

3)  The highest 0.5 % HTO expressing cells are excluded from the negative group to get rid of potential outliers.

4)  A negative binomial distribution is fitted to the remaining HTO values. The 0.99 quantile of the distribution is chosen as the HTO-specific threshold.

Afterwards, we can compared the HTO expression for each of the cells. If their expression level for a given HTO exceeds the threshold, they are positive for this HTO. Cells that were positive for only one HTO are classified as singlets. Cells that were positive for two or more HTOs or negative for all HTOs were classified as doublets or negatives, respectively.

The 0.99 quantile for the negative binomial distribution is the default value for the HTODemux function. Lowering the threshold will result in less cells being classified as negatives. However, more cells would be thought as doublets.

```{r}
melanoma_seu_obj <- HTODemux(melanoma_seu_obj, 
                             assay = "HTO", 
                             positive.quantile = 0.99)
```

We look at the number of cells classified as singlets, doublets and negative/ambiguous cells.

```{r}
table(melanoma_seu_obj$HTO_classification.global)
```

We take a look at the available metadata after HTODemux.

```{r}
melanoma_seu_obj@meta.data[1:10, ]
```

There are a lot of information from the demultiplexing. Information about the output from HTODemux can be found here:

<https://www.rdocumentation.org/packages/Seurat/versions/5.0.1/topics/HTODemux>

We will chose to focus on HTO_classification.global and HTO_maxID. The last mentioned column will be divided into a response and timepoint variable.

```{r}
# Splitting the information given by HTO_maxID:
melanoma_seu_obj[["response"]] <- str_split(melanoma_seu_obj@meta.data$HTO_maxID,
                                           pattern = "\\.",
                                           simplify = TRUE)[, 2]

melanoma_seu_obj[["timepoint"]] <- str_split(melanoma_seu_obj@meta.data$HTO_maxID,
                                           pattern = "\\.",
                                           simplify = TRUE)[, 3]
```

We group cells based on the max HTO signal. When expecting the ridgeline plot we see a lot of singlets expressing HTOs for CR + Eval, especially for sample 5 (E).

```{r}
Idents(melanoma_seu_obj) <- "hash.ID"

# Overall ridgeplot
ridgeplot_overall <- RidgePlot(melanoma_seu_obj,
                               assay = "HTO",
                               features = rownames(melanoma_seu_obj[["HTO"]]),
                               ncol = 2)

ggsave(filename = "ridgeplot_overall.png",
       path = results_path,
       plot = ridgeplot_overall)

# Individual sample ridgeplot
for (i in 1:5){
  ridgeplot_sample <- RidgePlot(subset(melanoma_seu_obj, orig.ident == i),
                                assay = "HTO",
                                features = rownames(melanoma_seu_obj[["HTO"]]),
                                ncol = 2)
  
  ggsave(filename = paste("ridgeplot_sample", LETTERS[i], ".png", sep = ""),
         path = results_path,
         plot = ridgeplot_sample)
}

ridgeplot_overall
```

The table below shows where the negatives are comming from.

```{r}
melanoma_seu_obj_negatives <- subset(melanoma_seu_obj, HTO_classification.global == "Negative")

table1(data = melanoma_seu_obj_negatives@meta.data, ~ response + timepoint + HTO_maxID + nCount_RNA + nFeature_RNA | orig.ident)
```

The negatives are mainly comming from sample 5 CR + Eval. For all other samples, the negatives originates from the same group. Overall, 97.5 % of negative cells seems to be CR + Eval. Thus, we would be careful about removing these cells, as we will be biased towards this condition. The table below shows where the doublets are comming from.

```{r}
melanoma_seu_obj_doublets <- subset(melanoma_seu_obj, HTO_classification.global == "Doublet")

table1(data = melanoma_seu_obj_doublets@meta.data, ~ response + timepoint + HTO_maxID + nCount_RNA + nFeature_RNA | orig.ident)
```

Overall, the doublelts seem to be more evenly distributed among the different conditions. We visualize pairs of HTO signals.

```{r}
qcPlotScatterHTO <- function(data, feature1, feature2){
  feature_name1 <- str_split(feature1, pattern = "\\.")
  feature_name2 <- str_split(feature2, pattern = "\\.")
  FeatureScatter({{data}}, 
                 feature1 = paste("hto_", feature1, sep = ""),
                 feature2 = paste("hto_", feature2, sep = ""),
                 plot.cor = FALSE) +
    xlab(paste(feature_name1[[1]][2], " + ", feature_name1[[1]][3])) +
    ylab(paste(feature_name2[[1]][2], " + ", feature_name2[[1]][3])) + 
    labs(colour = "HTO Classification") +
    scale_colour_discrete(labels = c("Doublets",
                                     "PD + Eval",
                                     "PD + Baseline",
                                     "CR + Eval",
                                     "CR + Baseline",
                                     "Negative")) 
}

scatterplot_CR_baselineVSeval <- qcPlotScatterHTO(melanoma_seu_obj,
                                                  "Hu.CR.Baseline",
                                                  "Hu.CR.Eval")

scatterplot_PD_baselineVSeval <- qcPlotScatterHTO(melanoma_seu_obj,
                                                  "Hu.PD.Baseline",
                                                  "Hu.PD.Eval")

scatterplot_baseline_crVSpd <- qcPlotScatterHTO(melanoma_seu_obj,
                                                "Hu.CR.Baseline",
                                                "Hu.PD.Baseline")

scatterplot_eval_crVSpd <- qcPlotScatterHTO(melanoma_seu_obj, 
                                            "Hu.CR.Eval", 
                                            "Hu.PD.Eval")

ggsave(filename = "scatterplot_CR_baselineVSeval.png",
         path = results_path,
         plot = scatterplot_CR_baselineVSeval)

ggsave(filename = "scatterplot_PD_baselineVSeval.png",
         path = results_path,
         plot = scatterplot_PD_baselineVSeval)

ggsave(filename = "scatterplot_baseline_crVSpd.png",
         path = results_path,
         plot = scatterplot_baseline_crVSpd)

ggsave(filename = "scatterplot_eval_crVSpd.png",
         path = results_path,
         plot = scatterplot_eval_crVSpd)

scatterplot_CR_baselineVSeval
```

There are many cells clustering together with doublets for CR + Baseline vs. CR + Eval though they are classified as CR + Baseline. This suggest that additional tools are nessesary for identifying doublets. We compare the number of UMIs for singlets, doublets and negative cells.

```{r}
Idents(melanoma_seu_obj) <- "HTO_classification.global"
VlnPlot(melanoma_seu_obj, 
        features = "nCount_RNA", 
        pt.size = 0.1,
        log = TRUE) +
  xlab("") + 
  labs(title = "Number of RNA molecules")
```

There is not a huge difference between the distribution suggeting that we might consider, if one would sort of doublets and negatives from the HTO classification.

```{r}
VlnPlot(melanoma_seu_obj, 
        features = "nFeature_RNA", 
        pt.size = 0.1,
        log = TRUE) +
  xlab("") + 
  labs(title = "Number of genes")
```

Again, the distribution of number of genes per cell do not seem to differ that much between singlets and negative cells.

```{r}
HTOHeatmap(melanoma_seu_obj, 
           assay = "HTO",
           ncells = 10000) +
    ggtitle("HTO identity") +
    theme(plot.title = element_text(hjust = 0.5))
      
# Johanne: I have included this plot, but I do not feel that I have much to say about it.
```

### Metadata

The percentage of mitochondrial, ribosomal and hemoglobin content is added.

```{r}
# Mitochondrial content
melanoma_seu_obj <- PercentageFeatureSet(melanoma_seu_obj,
                                pattern = "^MT-",
                                col.name = "percent_mt")

# Ribosomal content
melanoma_seu_obj <- PercentageFeatureSet(melanoma_seu_obj,
                                pattern = "^RP[SL]",
                                col.name = "percent_ribo")

# Hemoglobin content
melanoma_seu_obj <- PercentageFeatureSet(melanoma_seu_obj,
                                pattern = "^HB[^(P)]",
                                col.name = "percent_hb")
```

We add the patient ID from the HTODemux results. First, the sample information is read in to R from the excel sheet.

```{r}
sample_info <- read_xlsx("sample_info.xlsx")
sample_info[1:10, ]
```

We match the response and timepoint with the sample to get the patient ID. The patient ID is then added to the metadata.

```{r}
lanes <- LETTERS[1:5]
patient_response <- melanoma_seu_obj@meta.data$response
patient_timepoint <- melanoma_seu_obj@meta.data$timepoint 
patient_sample <- melanoma_seu_obj@meta.data$orig.ident
patient_id <- c()

for (i in 1:dim(melanoma_seu_obj)[2]){
  patient_id <- c(patient_id, 
                  sample_info$`Patient ID`[which(sample_info$BOR == patient_response[i] & sample_info$`Time point` == patient_timepoint[i] & sample_info$`10x lane` == lanes[patient_sample[i]])])
}

names(patient_id) <- colnames(melanoma_seu_obj)

melanoma_seu_obj <- AddMetaData(object = melanoma_seu_obj,
                                metadata = patient_id,
                                col.name = "patient_id")
```

We save the Seurat object before proceeding with the filtering.

```{r}
saveRDS(melanoma_seu_obj, file = paste(data_path, 
                                       "seurat_data/melanoma_seu_obj.rds",
                                       sep = "/"))
```

## Filtering

The goal of filtering is to only include true cells that are of high quality based on the quality metrics generated in the prevoius section. First, the Seurat object is loaded to the enviroment.

```{r}
melanoma_seu_obj <- readRDS(paste(data_path,
                                  "seurat_data/melanoma_seu_obj.rds", 
                                  sep="/"))
```

### Quality Control

The following code are customized plot functions for quality control.

```{r}
qcPlotVln <- function(seu_obj, feature, feature_name, threshold1, threshold2){
  ggplot(data = seu_obj@meta.data,
         mapping = aes(x = orig.ident,
                     y = {{feature}})) +
  geom_violin(colour = "#6699CC",
              fill = "#6699CC",
              alpha = 0.2) +
  geom_jitter(size = 0.1,
              alpha = 0.2) + 
  scale_x_discrete(labels = LETTERS[1:5]) + 
  xlab("Sample") + 
  ylab(feature_name) + 
  labs(title = paste("Distribution of", tolower(feature_name), "across samples",
                     sep = " ")) +
  #facet_wrap(~reponse) + 
  theme_bw() + 
  geom_hline(yintercept = c(threshold1, threshold2),
             colour = "#CC3333")
}

qcPlotDens <- function(seu_obj, feature, feature_name, threshold1, threshold2){
  ggplot(data = seu_obj@meta.data,
         mapping = aes(x = {{feature}},
                       fill = orig.ident)) +
  geom_density(alpha = 0.2) +
  scale_x_log10() +
  xlab(feature_name) + 
  ylab("Density") + 
  labs(title = paste("Distribution of", tolower(feature_name), "across samples",
                     sep = " "),
       fill = "Sample") +
  scale_fill_discrete(labels = LETTERS[1:5]) + 
  #facet_wrap(~reponse) + 
  theme_bw() + 
  geom_vline(xintercept = c(threshold1, threshold2),
             colour = "#CC3333")
}

# Johanne: When including the face_wrap, we see very few genes for one CR responders in sample A!
```

We inspect the distribution for different variables in the metadata to decide the filtering thresholds.

```{r}
# Generate violin plots
vlnplot_gene <- qcPlotVln(melanoma_seu_obj,
                          nFeature_RNA,
                          "Number of genes",
                          300, 3000)
vlnplot_mole <- qcPlotVln(melanoma_seu_obj,
                          nCount_RNA,
                          "Number of molecules",
                          500, 12500)
vlnplot_mito <- qcPlotVln(melanoma_seu_obj, 
                          percent_mt, 
                          "Mitochondrial content (%)", 
                          NULL, 10)
vlnplot_ribo <- qcPlotVln(melanoma_seu_obj, 
                          percent_ribo, 
                          "Ribosomal content (%)", 
                          NULL, NULL)
vlnplot_hemo <- qcPlotVln(melanoma_seu_obj, 
                          percent_hb, 
                          "Hemoglobin content (%)", 
                          NULL, NULL)
# Generate density plots
densplot_gene <- qcPlotDens(melanoma_seu_obj, 
                            nFeature_RNA, 
                            "Number of genes", 
                            300, 3000)
densplot_mole <- qcPlotDens(melanoma_seu_obj, 
                            nCount_RNA, 
                            "Number of molecules", 
                            500, 12500)
densplot_mito <- qcPlotDens(melanoma_seu_obj, 
                            percent_mt, 
                            "Mitochondrial content (%)", 
                            NULL, 10)
densplot_ribo <- qcPlotDens(melanoma_seu_obj, 
                            percent_ribo, 
                            "Ribosomal content (%)", 
                            NULL, NULL)
densplot_hemo <- qcPlotDens(melanoma_seu_obj, 
                            percent_hb, 
                            "Hemoglobin content (%)", 
                            NULL, NULL)

# Save plots
vlnplot <- list(vlnplot_gene, vlnplot_mole, vlnplot_mito, vlnplot_ribo, vlnplot_hemo)
densplot <- list(densplot_gene, densplot_mole, densplot_mito, densplot_ribo, densplot_hemo)
metric <- c("gene", "mole", "mito", "ribo", "hemo")
vlnplot_name <- paste("vlnplot_", metric, ".png", sep = "")
densplot_name <- paste("densplot_", metric, ".png", sep = "")

for (i in 1:5){
  ggsave(filename = vlnplot_name[i],
         path = results_path,
         plot = vlnplot[[i]])
  ggsave(filename = densplot_name[i],
         path = results_path,
         plot = densplot[[i]])
}
```

We chose here to take a closer look at the distribution for the number of genes.

```{r}
densplot_gene
```

The red lines indicates the filtering threshold found to be reasonable across samples. The distributions of genes seem to be alike. 

```{r}
vlnplot_mito
```

The violin plot above shows the mitochondrial content for each cell across samples. A high mitochondrial content would indicate dying cells, so we will only keep cells with less that 10% mitochondrial content. We take a look at the number of RNA molecules pr. cell vs. the number of genes.

```{r}
qcPlotScatter <- function(data, feature1, feature2, feature_name, threshold){
  ggplot(data = {{data}}@meta.data,
         mapping = aes(x = {{feature1}},
                       y = {{feature2}},
                       colour = orig.ident)) +
  geom_point(alpha = 0.5) +
  #facet_wrap(~orig.ident) +
  xlab(feature_name[1]) + 
  ylab(feature_name[2]) + 
  labs(title = paste(feature_name[1], "vs.", tolower(feature_name[2]),
                     sep = " "),
       colour = "Sample") +
  scale_colour_discrete(labels = LETTERS[1:5]) + 
  theme_bw() +
  geom_vline(xintercept = c(threshold[1], threshold[2]),
             colour = "#CC3333") +
  geom_hline(yintercept = c(threshold[3], threshold[4]),
             colour = "#CC3333")
}

scatterplot <- qcPlotScatter(melanoma_seu_obj, 
                             nCount_RNA, 
                             nFeature_RNA, 
                             c("Number of molecules", "Number of genes"), 
                             c(500, 12500, 300, 3000))

ggsave(filename = "scatterplot_overall.png",
         path = results_path,
         plot = scatterplot)
```

The number of molecules vs. genes seems to be nicely correlated. Data points in the bottom right corner would indicate low quality cells, where the same genes are being sequenced over and over again. Cells in the top left corner could be doublets resulting in a large number of detected genes. As we do not see any cells in these areas, the data quality overall seem fine. We filter the cells based on our QC metrics. We also remove all ribosomal genes.

```{r}
melanoma_seu_obj_filtered <- subset(melanoma_seu_obj,
                                    subset = nFeature_RNA > 300 & nFeature_RNA < 3000 & nCount_RNA > 500 & nCount_RNA < 12500 & percent_mt < 10)

melanoma_seu_obj_filtered <- melanoma_seu_obj_filtered[!grepl('^RP[SL]', rownames(melanoma_seu_obj_filtered)), ]

melanoma_seu_obj_filtered
```

Let us see how much the filtering step removed:

```{r}
print(paste("Genes removed: ", 
            dim(melanoma_seu_obj)[1] - dim(melanoma_seu_obj_filtered)[1], 
            " (",
            round((dim(melanoma_seu_obj)[1] - dim(melanoma_seu_obj_filtered)[1])/dim(melanoma_seu_obj)[1] * 100, 
                  digits = 4),
            "%)",
      sep = ""))

print(paste("Cells removed: ", 
            dim(melanoma_seu_obj)[2] - dim(melanoma_seu_obj_filtered)[2], 
            " (",
            round((dim(melanoma_seu_obj)[2] - dim(melanoma_seu_obj_filtered)[2])/dim(melanoma_seu_obj)[2] * 100, 
                  digits = 4),
            "%)",
      sep = ""))
```

## Doublet Identification

We wish to identify doublets using the scDblFinder package, which gathers various methods for the detection and handling of doublets. We will use the computeDoubletDensity approach, where we obtain a doublet score for each cell based on the density of simulated doublets around it.

### Normalization

Before doublet detection, we must normalize and find variable features according to the standard Seurat workflow. The counts are normalized by dividing the count for each gene pr. cell by the total counts for that cell and multiplied by a scale factor. This is then log transformed using the natural log. 

```{r}
melanoma_seu_obj_filtered <- NormalizeData(melanoma_seu_obj_filtered,
                                           normalization.method = "LogNormalize",
                                           scale.factor = 10000)
```

### Identification of Highly Variable Features

We find a subset of features that exhibit high cell-to-cell variation in the dataset. These genes are thought be the most biological relevant genes, and by focussing on these features the computations will become more efficient in the downstream analysis. We choose to find the 2000 most variable genes, which is the default value for the FindVariableFeatures function.

```{r}
melanoma_seu_obj_filtered <- FindVariableFeatures(melanoma_seu_obj_filtered,
                                                  selection.method = "vst",
                                                  nfeatures = 2000)
```

### Scale Data

The normalized counts for the variable genes are scaled, that is, the mean expression across cells becomes 0 and the variance across cells is 1. This step is a standard step prior to dimensional reduction techniques. 

```{r}
melanoma_seu_obj_filtered <- ScaleData(melanoma_seu_obj_filtered,
                                       features = VariableFeatures(object = melanoma_seu_obj_filtered))
```

### Dimensionality Reduction

To visualize the data in an UMAP plot later on, linear dimensional reduction, PCA, is performed. 

```{r}
melanoma_seu_obj_filtered <- RunPCA(melanoma_seu_obj_filtered,
                                    features = VariableFeatures(object = melanoma_seu_obj_filtered))

ElbowPlot(melanoma_seu_obj_filtered, reduction = "pca")
```

From the elbow plot, we should be fine with using above 20 dimensions.

```{r}
melanoma_seu_obj_filtered <- RunUMAP(melanoma_seu_obj_filtered, dims = 1:30)
```

The current steps are saved.

```{r}
saveRDS(melanoma_seu_obj_filtered, file = paste(data_path,
                                       "seurat_data/melanoma_seu_obj_filtered.rds",
                                       sep = "/"))
```

### Doublet Score

First, the Seurat object with the filtered data is loaded to the enviroment.

```{r}
melanoma_seu_obj <- readRDS(paste(data_path,
                                  "seurat_data/melanoma_seu_obj_filtered.rds", 
                                  sep="/"))
```

We convert the seurat object to a sce object and save the variable features to be used for doublet detection.

```{r}
melanoma_sce <- as.SingleCellExperiment(melanoma_seu_obj_filtered)

melanoma_sce_top_var <- VariableFeatures(melanoma_seu_obj_filtered)
```

Doublet scores are computed with computeDoubletDensity described in

<https://rdrr.io/github/plger/scDblFinder/man/computeDoubletDensity.html>

The procedure is as follows:

1)  A number of doublets (controlled by the parameter "niters" computeDoubletDensity) are simulated by adding the count vectors for two randomly chosen cells in the count matrix.

2)  In a low-dimensional space after a PCA on the log-normalized expression matrix, the density of neighboring artificial doublets for each cell is computed and compared to the density of neighboring original cells to yield a doublet score.

```{r}
melanoma_sce_dbl_dens <- computeDoubletDensity(melanoma_sce,
                                               subset.row = melanoma_sce_top_var,
                                               d = ncol(reducedDim(melanoma_sce)))

melanoma_sce$DoubletScore <- melanoma_sce_dbl_dens
```

We visualize the cells in a UMAP plot colored by the doublet score.

```{r}
umapplot_doubletscore <- plotUMAP(melanoma_sce, colour_by="DoubletScore")

ggsave(filename = "umapplot_doubletscore.png",
         path = results_path,
         plot = umapplot_doubletscore)

umapplot_doubletscore
```

As expected, cells with a high doublet score tend to cluster together.

### Doublet Thresholding

We use doubletThresholding to establish a threshold for the doublet score to call the doublets.

```{r}
melanoma_sce_dbl_calls <- doubletThresholding(data.frame(score = melanoma_sce_dbl_dens),
                                              method ="griffiths",
                                              returnType ="call")

print(paste("Singlets: ", 
            summary(melanoma_sce_dbl_calls)[1], 
            " (",
            round(summary(melanoma_sce_dbl_calls)[1]/length(melanoma_sce_dbl_calls) * 100, 
                  digits = 4),
            "%)",
      sep = ""))

print(paste("Doublets: ", 
            summary(melanoma_sce_dbl_calls)[2], 
            " (",
            round(summary(melanoma_sce_dbl_calls)[2]/length(melanoma_sce_dbl_calls) * 100, 
                  digits = 4),
            "%)",
      sep = ""))
```

The amount of doublets seems reasonable. We add the classification to the metadata.

```{r}
names(melanoma_sce_dbl_calls) <- colnames(melanoma_sce)

melanoma_seu_obj_filtered <- AddMetaData(object = melanoma_seu_obj_filtered,
                                         metadata = melanoma_sce_dbl_calls,
                                         col.name = "doublet_call")
```

Let us look at the results.

```{r}
melanoma_cell_status <- melanoma_seu_obj_filtered@meta.data
melanoma_cell_status$HTO_classification.global <- factor(melanoma_cell_status$HTO_classification.global,
                                                         levels = c("Singlet", "Doublet", "Negative"))
melanoma_cell_status$doublet_call <- factor(melanoma_cell_status$doublet_call,
                                                         levels = c("singlet", "doublet"),
                                            labels = c("Singlet", "Doublet"))

label(melanoma_cell_status$HTO_classification.global) <- "HTODemux Classification"   
label(melanoma_cell_status$doublet_call) <- "scDblFinder Classification"   

table1(data = melanoma_cell_status, 
       ~ doublet_call | HTO_classification.global,
       caption = "HTODemux Classification")
```

77.1% of the cells being identified as doublets by HTODemux are classified as singlets from doublet identification by the scDblFinder. Let us see the results for each patient.

```{r}
table1(data = melanoma_cell_status, 
       ~ doublet_call + HTO_classification.global | patient_id,
       caption = "Patient ID")
```

For the scDbl classification, the rate of doublets pr. patient is between 7.4 - 37.1%, so the doublets seem to be somewhat distributed equally across patients. However, from the HTO classification we see around 70% of the cells from patient 1, 3, and 8 being called as doublets. Meanwhile, the negative cells mainly arise from patient 5 and to less extent patient 4. 

We choose to remove the doublets identified by the doublet score.

```{r}
melanoma_seu_obj_preprocessed <- subset(melanoma_seu_obj_filtered,
                                        subset = doublet_call == "singlet")


print(paste("Genes removed: ", 
            dim(melanoma_seu_obj_filtered)[1] - dim(melanoma_seu_obj_preprocessed)[1], 
            " (",
            round((dim(melanoma_seu_obj_filtered)[1] - dim(melanoma_seu_obj_preprocessed)[1])/dim(melanoma_seu_obj_filtered)[1] * 100, 
                  digits = 4),
            "%)",
      sep = ""))

print(paste("Cells removed: ", 
            dim(melanoma_seu_obj_filtered)[2] - dim(melanoma_seu_obj_preprocessed)[2], 
            " (",
            round((dim(melanoma_seu_obj_filtered)[2] - dim(melanoma_seu_obj_preprocessed)[2])/dim(melanoma_seu_obj_filtered)[2] * 100, 
                  digits = 4),
            "%)",
      sep = ""))
```

The final Seurat object is saved.

```{r}
saveRDS(melanoma_seu_obj_preprocessed, 
        file = paste(data_path,
                     "seurat_data/melanoma_seu_obj_preprocessed.rds",
                     sep = "/"))
```
