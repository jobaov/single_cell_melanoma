---
title: "Cell Abundance"
format: html
editor: visual
---

# Differential cell abundance analysis

### Set up

```{r}
#|output: false

library(Seurat)
library(tidyverse)
library(stringr)
library(patchwork)
library(ggplot2)
library(DESeq2)
library(table1)
library(DCATS)
library(enrichplot)
library(ggrepel)
```

```{r}
# Johanne
#path <- "/Volumes/Department/Sund/Public/T-Cell-Signalling-and-Development/VB Lab/10x_data/SpecialProject/10xRNA_H-melanoma-PBMC-gdT/code"

# Helene
#path <- "o:/Public/T-Cell-Signalling-and-Development/VB Lab/10x_data/SpecialProject/10xRNA_H-melanoma-PBMC-gdT/code"

#setwd(path)

data_path <- "o:/Public/T-Cell-Signalling-and-Development/VB Lab/10x_data/SpecialProject/10xRNA_H-melanoma-PBMC-gdT/data"

results_path <- "o:/Public/T-Cell-Signalling-and-Development/VB Lab/10x_data/SpecialProject/10xRNA_H-melanoma-PBMC-gdT/results"
```

### Data Load

The preprocessed data containing all experiments are loaded.

```{r}
melanoma_seu_obj_ann <- readRDS(paste(data_path, "/seurat_data/melanoma_seu_obj_annotated.rds", sep = ""))
```

```{r}
melanoma_seu_obj_ann <- melanoma_seu_obj_integrated
```

### Differential abundance (DA) between responders
In DA analysis the purpose is to test for significant changes per identified cell type across conditions. DA analysis can reveal cell types that are depleted or enriched when comparing conditions.
The tool DCAT is used, which inputs a misclassification matrix, count matrix and design matrix to a glm model that then return statistical measurement for each cell type, checking if there are a significant enrichment of cell types in one condition compared to the others.

The misclassification matrix can be obtained in different ways, here by using the graph based approach with the knn_simMat function
```{r}
knn_mat = knn_simMat(melanoma_seu_obj_ann@graphs$integrated_snn, melanoma_seu_obj_ann$Cell_ann)
knn_mat
```

The count matrix contain the number of cells for each cell type in each patient
```{r}
melanoma_seu_obj_ann$id <- paste0(melanoma_seu_obj_ann$response, melanoma_seu_obj_ann$patient_id)

count_mat = table(melanoma_seu_obj_ann$id, melanoma_seu_obj_ann$Cell_ann)
count_mat
```

The design matrix contain the "condition" for each patient
```{r}
condition_vector <- rep(c("CR", "PD"), each = 5)
melanoma_design <- data.frame(condition = condition_vector)
melanoma_design
```

The three matrices are input to the glm model and the results are summarized in a dataframe
```{r}
results_DA <- dcats_GLM(count_mat, melanoma_design, knn_mat)

log_fold_changes <- results_DA$ceoffs[, 1]
p_values <- results_DA$LRT_pvals[, 1]
cell_types <- rownames(results_DA$ceoffs)

neg_log10_p_values <- -log10(p_values)

DCAT_data <- data.frame(
  log_fold_change = log_fold_changes,
  neg_log10_p_value = neg_log10_p_values,
  cell_type = cell_types
)
DCAT_data
```

```{r}
# Create a volcano plot with labels and save
volcanoplot <- ggplot(DCAT_data, aes(x = log_fold_change, y = neg_log10_p_value, label = cell_type)) +
  geom_point(aes(color = factor(results_DA$fdr[, 1] < 0.05)), size = 3) +
  geom_text_repel(aes(label = cell_type), box.padding = 0.5, point.padding = 0.1, size = 3) +
  scale_color_manual(values = c("black", "red"), guide = FALSE) +
  labs(
    title = "Progressive disease vs Complete responder",
    x = "Log-fold Change",
    y = "-log10(p-value)"
  )
volcanoplot
```

```{r}
# Create dataframe with counts for each diseasegroup
table_response <- table(melanoma_seu_obj_ann$response, melanoma_seu_obj_integrated$Cell_ann)
df_response <- data.frame(table_response)
df_response
```

```{r}
ggplot(df_response, aes(x = Var2, y= Freq, fill = Var1)) +
  geom_bar(stat = 'identity')
```




### Differential abundance between treatment
The count matrix contain the number of cells for each cell type in each patient at baseline and eval timepoint
```{r}
melanoma_seu_obj_ann$id_time <- paste0(melanoma_seu_obj_ann$timepoint, melanoma_seu_obj_ann$patient_id)

count_mat_BE = table(melanoma_seu_obj_ann$id_time, melanoma_seu_obj_ann$Cell_ann)
count_mat_BE
```

The design matrix are now containing baseline and eval.
```{r}
# Create design dataframe
condition_vector_BE <- rep(c("Baseline", "Eval"), each = 10)
melanoma_design_BE <- data.frame(condition = condition_vector_BE)
melanoma_design_BE
```

The three matrices are input to the glm model and the results are summarized in a dataframe
```{r}
results_DA_BE <- dcats_GLM(count_mat_BE, melanoma_design_BE, knn_mat)

log_fold_changes_BE <- results_DA_BE$ceoffs[, 1]
p_values_BE <- results_DA_BE$LRT_pvals[, 1]
cell_types_BE <- rownames(results_DA_BE$ceoffs)

neg_log10_p_values_BE <- -log10(p_values_BE)

DCAT_data_BE <- data.frame(
  log_fold_change = log_fold_changes_BE,
  neg_log10_p_value = neg_log10_p_values_BE,
  cell_type = cell_types_BE
)
DCAT_data_BE
```


```{r}
# Create a volcano plot with labels and save
volcanoplot_BE <- ggplot(DCAT_data_BE, aes(x = log_fold_change, y = neg_log10_p_value, label = cell_type)) +
  geom_point(aes(color = factor(results_DA_BE$fdr[, 1] < 0.05)), size = 3) +
  geom_text_repel(aes(label = cell_type), box.padding = 0.5, point.padding = 0.1, size = 3) +
  scale_color_manual(values = c("black", "red"), guide = FALSE) +
  labs(
    title = "Baseline vs Eval",
    x = "Log-fold Change",
    y = "-log10(p-value)"
  )
volcanoplot_BE
```

```{r}
# Create dataframe with counts for each diseasegroup
table_timepoint <- table(melanoma_seu_obj_ann$timepoint, melanoma_seu_obj_integrated$Cell_ann)
df_timepoint <- data.frame(table_timepoint)
df_timepoint
```

```{r}
ggplot(df_timepoint, aes(x = Var1, y= Freq, fill = Var2)) +
  geom_bar(stat = 'identity')
```















