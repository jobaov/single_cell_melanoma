---
title: "2. Integration"
format: html
editor: visual
---

# Integrating 10xRNA_H-melanoma-PBMC-gdT

### Set up

```{r}
#|output: false

library(Seurat)
library(tidyverse)
library(stringr)
library(patchwork)
library(ggplot2)
library(SingleCellExperiment)
library(scDblFinder)
library(DESeq2)
library(scater)
library(table1)
```

```{r}
# Johanne
#path <- "/Volumes/Department/Sund/Public/T-Cell-Signalling-and-Development/VB Lab/10x_data/SpecialProject/10xRNA_H-melanoma-PBMC-gdT/code"

# Helene
#path <- "o:/Public/T-Cell-Signalling-and-Development/VB Lab/10x_data/SpecialProject/10xRNA_H-melanoma-PBMC-gdT/code"

#setwd(path)

data_path <- "o:/Public/T-Cell-Signalling-and-Development/VB Lab/10x_data/SpecialProject/10xRNA_H-melanoma-PBMC-gdT/data"

results_path <- "o:/Public/T-Cell-Signalling-and-Development/VB Lab/10x_data/SpecialProject/10xRNA_H-melanoma-PBMC-gdT/results"
```

### Data Load

The preprocessed data containing all experiments are loaded.

```{r}
melanoma_seu_obj_preproc <- readRDS(paste(data_path, "/seurat_data/melanoma_seu_obj_preprocessed.rds", sep = ""))
```

## Clustering

The data are clustered by running functions FindNeigbors and FindClusters, then visualized using a UMAP plot at different resolutions.

```{r}
melanoma_seu_obj_preproc <- FindNeighbors(melanoma_seu_obj_preproc, dims = 1:30)

melanoma_seu_obj_preproc <- FindClusters(melanoma_seu_obj_preproc, resolution = c(0.1, 0.2, 0.3, 0.5, 0.7))

ElbowPlot(melanoma_seu_obj_preproc)

melanoma_seu_obj_preproc <- RunUMAP(melanoma_seu_obj_preproc, dims = 1:30)


```

```{r}
DimPlot(melanoma_seu_obj_preproc, group.by = "RNA_snn_res.0.1", label = TRUE, reduction = "umap")

DimPlot(melanoma_seu_obj_preproc, group.by = "RNA_snn_res.0.2", label = TRUE, reduction = "umap")

DimPlot(melanoma_seu_obj_preproc, group.by = "RNA_snn_res.0.3", label = TRUE, reduction = "umap")

DimPlot(melanoma_seu_obj_preproc, group.by = "RNA_snn_res.0.5", label = TRUE, reduction = "umap")

DimPlot(melanoma_seu_obj_preproc, group.by = "RNA_snn_res.0.7", label = TRUE, reduction = "umap")
```

## Integrating samples

The clustering are first visualized by coloring the clustering by experiment, to see if the clustering are performed on a technical variation (batch effects) rather than on biological variation.

```{r}
#Visualize Umap grouped by "batch effect"
Non_integrated_experiment_grouped <- DimPlot(melanoma_seu_obj_preproc, reduction = "umap", group.by = "orig.ident")
Non_integrated_experiment_grouped

ggsave("Non_integrated_experiment_grouped.png", Non_integrated_experiment_grouped, path= paste(results_path, "/Integration", sep = ""))

Non_integrated_experiment_split_res0.2 <- DimPlot(melanoma_seu_obj_preproc, reduction = "umap", split.by = "orig.ident", group.by = "RNA_snn_res.0.2")
Non_integrated_experiment_split_res0.2

ggsave("Non_integrated_experiment_split_res0.2.png", Non_integrated_experiment_split_res0.2, path= paste(results_path, "/Integration", sep = ""))

DimPlot(melanoma_seu_obj_preproc, reduction = "umap", group.by = "HTO_maxID")


#Split the dataset into a list of Seurat objects.
#Normalize and identify variable features for each group independently.



```

The data are split according to the experiments, then for each experiment are the data normalized and the highly variable features are found.

The integration works by: - Features are chosen by ranking the number of samples they are variable in. - The anchors are found by identifying pairs of mutual nearest neighbors, these represent cells in a shared biological state and will guide the integration - Then perform the integration by computing correction vectors for each cell.

```{r}
#Add group to split by
obj.list <- SplitObject(melanoma_seu_obj_preproc, split.by = "orig.ident")

for(i in 1:length(obj.list)){
  obj.list[[i]] <- NormalizeData(object = obj.list[[i]])
  obj.list[[i]]<- FindVariableFeatures(object = obj.list[[i]])
}


#Speed up integration, by running as parallel session
#library(future)
#plan("multisession", workers = 4)
options(future.globals.maxSize = 8000 * 1024^2)


features <- SelectIntegrationFeatures(object.list = obj.list)

anchors <- FindIntegrationAnchors(object.list = obj.list,
                                  anchor.features = features)

melanoma_seu_obj_integrated <- IntegrateData(anchorset = anchors)


DefaultAssay(melanoma_seu_obj_integrated) <- "integrated"
#saveRDS(melanoma_seu_obj_integrated, paste(data_path, "/seurat_data/melanoma_seu_obj_integrated.rds", sep = ""))

#read integrated data
#melanoma_seu_obj_integrated <- readRDS(paste(data_path, "/seurat_data/melanoma_seu_obj_integrated.rds", sep = ""))

#plan("sequential")
```

Scale the integrated data and perform the clustering again on the now integrated data

```{r}
all.genes <- rownames(melanoma_seu_obj_integrated)
melanoma_seu_obj_integrated <- ScaleData(melanoma_seu_obj_integrated, features = all.genes)

melanoma_seu_obj_integrated <- RunPCA(melanoma_seu_obj_integrated, features = VariableFeatures(object = melanoma_seu_obj_integrated))

ElbowPlot(melanoma_seu_obj_integrated)

melanoma_seu_obj_integrated <- FindNeighbors(melanoma_seu_obj_integrated, dims = 1:30)
melanoma_seu_obj_integrated <- FindClusters(melanoma_seu_obj_integrated, resolution = c(0.1, 0.2, 0.25, 0.3, 0.4))
```

```{r}
# Visualize the new clustering with a UMAP split by the batch corrected group.

melanoma_seu_obj_integrated <- RunUMAP(melanoma_seu_obj_integrated, dims = 1:30)

DimPlot(melanoma_seu_obj_integrated, reduction = "umap")

umap_integrated_experiment <- DimPlot(melanoma_seu_obj_integrated,
                                      group.by = "orig.ident",
                                      label = TRUE)
umap_integrated_experiment
#ggsave("umap_integrated_experiment.png", umap_integrated_experiment, path= paste(results_path, "Integration", sep = ""))

#umap_integrated_disease <- DimPlot(melanoma_seu_obj_integrated,
 #                                  split.by = "HTO_maxID",
  #                                 label = TRUE,
   #                                group.by = "integrated_snn_res.0.2")
#umap_integrated_disease
```

### Determine clustering resolution using clustree

```{r}
library(clustree)

clustering_tree_res <- clustree(melanoma_seu_obj_integrated, prefix = "integrated_snn_res.")
clustering_tree_res
ggsave("clustree_low_res.png", clustering_tree_res, path= paste(results_path, "integration", sep = "/"))

umap_res_0.2 <- DimPlot(melanoma_seu_obj_integrated, group.by = "integrated_snn_res.0.2", label = TRUE, reduction = "umap")
umap_res_0.2
ggsave("umap_res_0.2.png", umap_res_0.2, path= paste(results_path, "integration", sep = "/"))

umap_res_0.25 <- DimPlot(melanoma_seu_obj_integrated, group.by = "integrated_snn_res.0.25", label = TRUE, reduction = "umap")
umap_res_0.25
ggsave("umap_res_0.25.png", umap_res_0.25, path= paste(results_path, "integration", sep = "/"))

umap_res_0.3 <- DimPlot(melanoma_seu_obj_integrated, group.by = "integrated_snn_res.0.3", label = TRUE, reduction = "umap")
ggsave("umap_res_0.3.png", umap_res_0.3, path= paste(results_path, "integration", sep = "/"))
umap_res_0.2
umap_res_0.3
```

```{r}

# set idents to the best resolution
Idents(melanoma_seu_obj_integrated) <- "integrated_snn_res.0.3"

# Identify conserved cell type markers to identify the cell types corresponding to the remaining clusters

#Identify conserved cell type markers
DefaultAssay(melanoma_seu_obj_integrated) <- "RNA"

seurat_joinlayer <- JoinLayers(melanoma_seu_obj_integrated)

cluster7_conserved_markers <- FindConservedMarkers(seurat_joinlayer,
                                                   ident.1 = 7,
                                                   grouping.var = "response",
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster6_conserved_markers <- FindConservedMarkers(seurat_joinlayer,
                                                   ident.1 = 6,
                                                   grouping.var = "response",
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster5_conserved_markers <- FindConservedMarkers(seurat_joinlayer,
                                                   ident.1 = 5,
                                                   grouping.var = "response",
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster4_conserved_markers <- FindConservedMarkers(seurat_joinlayer,
                                                   ident.1 = 4,
                                                   grouping.var = "response",
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster3_conserved_markers <- FindConservedMarkers(seurat_joinlayer,
                                                   ident.1 = 3,
                                                   grouping.var = "response",
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster2_conserved_markers <- FindConservedMarkers(seurat_joinlayer,
                                                   ident.1 = 2,
                                                   grouping.var = "response",
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster1_conserved_markers <- FindConservedMarkers(seurat_joinlayer,
                                                   ident.1 = 1,
                                                   grouping.var = "response",
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster0_conserved_markers <- FindConservedMarkers(seurat_joinlayer,
                                                   ident.1 = 0,
                                                   grouping.var = "response",
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)
```

```{r}
cluster7_markers <- FindMarkers(seurat_joinlayer,
                                                   ident.1 = 7,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster6_markers <- FindMarkers(seurat_joinlayer,
                                                   ident.1 = 6,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster5_markers <- FindMarkers(seurat_joinlayer,
                                                   ident.1 = 5,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster4_markers <- FindMarkers(seurat_joinlayer,
                                                   ident.1 = 4,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster3_markers <- FindMarkers(seurat_joinlayer,
                                                   ident.1 = 3,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster2_markers <- FindMarkers(seurat_joinlayer,
                                                   ident.1 = 2,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster1_markers <- FindMarkers(seurat_joinlayer,
                                                   ident.1 = 1,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster0_markers <- FindMarkers(seurat_joinlayer,
                                                   ident.1 = 0,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)
```

```{r}
# Rename all identities

#Cluster 0, 1 and 2 are biologically uncharacterized activated T-cells
melanoma_seu_obj_integrated <- RenameIdents(object = melanoma_seu_obj_integrated,
                                "0" = "VD2",
                                "1" = "VD1",
                                "2" = "VD2",
                                "3" = "VD1",
                                "4" = "UANN1",
                                "5" = "VD3",
                                "6" = "UANN2",
                                "7" = "UANN3"
                                )

# Create a new column in metadata with cell type annotations from idents
melanoma_seu_obj_integrated@meta.data$Cell_ann <- Idents(melanoma_seu_obj_integrated)

saveRDS(melanoma_seu_obj_integrated, paste(data_path, "seurat_data/melanoma_seu_obj_annotated.rds", sep = "/"))
```

Visualize the data with annotations

```{r}
# visualize data
clusters <- DimPlot(melanoma_seu_obj_integrated, reduction = 'umap', label = TRUE)
ggsave("cell_type_clusters.png", clusters, path= paste(results_path, "cell_annotation", sep = "/"))

respond_group <- DimPlot(melanoma_seu_obj_integrated, reduction = 'umap', group.by = 'response')
ggsave("respond_group.png", respond_group, path= paste(results_path, "cell_annotation", sep = "/"))

experiment <- DimPlot(melanoma_seu_obj_integrated, reduction = 'umap', group.by = 'orig.ident')
patient <- DimPlot(melanoma_seu_obj_integrated, reduction = 'umap', group.by = 'patient_id')

timepoint <- DimPlot(melanoma_seu_obj_integrated, reduction = 'umap', group.by = 'timepoint')
ggsave("timepoint.png", timepoint, path= paste(results_path, "cell_annotation", sep = "/"))

patient_cell <- DimPlot(melanoma_seu_obj_integrated, reduction = 'umap', group.by = 'patient_id', split.by = 'Cell_ann')
ggsave("patient_split_cellann.png", patient_cell, path= paste(results_path, "cell_annotation", sep = "/"))

respond_group

clusters
```
